/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.spotbot.entities.tables.records;


import com.lickhunter.spotbot.entities.tables.Symbol;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SymbolRecord extends UpdatableRecordImpl<SymbolRecord> implements Record8<String, Integer, Integer, Double, Integer, Double, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>SYMBOL.SYMBOL</code>.
     */
    public void setSymbol(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>SYMBOL.SYMBOL</code>.
     */
    public String getSymbol() {
        return (String) get(0);
    }

    /**
     * Setter for <code>SYMBOL.GALAXY_SCORE</code>.
     */
    public void setGalaxyScore(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>SYMBOL.GALAXY_SCORE</code>.
     */
    public Integer getGalaxyScore() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>SYMBOL.ALT_RANK</code>.
     */
    public void setAltRank(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>SYMBOL.ALT_RANK</code>.
     */
    public Integer getAltRank() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>SYMBOL.STEP_SIZE</code>.
     */
    public void setStepSize(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>SYMBOL.STEP_SIZE</code>.
     */
    public Double getStepSize() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>SYMBOL.QUOTE_PRECISION</code>.
     */
    public void setQuotePrecision(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>SYMBOL.QUOTE_PRECISION</code>.
     */
    public Integer getQuotePrecision() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>SYMBOL.PRICE</code>.
     */
    public void setPrice(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>SYMBOL.PRICE</code>.
     */
    public Double getPrice() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>SYMBOL.ORDER_ID</code>.
     */
    public void setOrderId(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>SYMBOL.ORDER_ID</code>.
     */
    public Long getOrderId() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>SYMBOL.IS_TRADING</code>.
     */
    public void setIsTrading(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>SYMBOL.IS_TRADING</code>.
     */
    public Boolean getIsTrading() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, Integer, Double, Integer, Double, Long, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<String, Integer, Integer, Double, Integer, Double, Long, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Symbol.SYMBOL.SYMBOL_;
    }

    @Override
    public Field<Integer> field2() {
        return Symbol.SYMBOL.GALAXY_SCORE;
    }

    @Override
    public Field<Integer> field3() {
        return Symbol.SYMBOL.ALT_RANK;
    }

    @Override
    public Field<Double> field4() {
        return Symbol.SYMBOL.STEP_SIZE;
    }

    @Override
    public Field<Integer> field5() {
        return Symbol.SYMBOL.QUOTE_PRECISION;
    }

    @Override
    public Field<Double> field6() {
        return Symbol.SYMBOL.PRICE;
    }

    @Override
    public Field<Long> field7() {
        return Symbol.SYMBOL.ORDER_ID;
    }

    @Override
    public Field<Boolean> field8() {
        return Symbol.SYMBOL.IS_TRADING;
    }

    @Override
    public String component1() {
        return getSymbol();
    }

    @Override
    public Integer component2() {
        return getGalaxyScore();
    }

    @Override
    public Integer component3() {
        return getAltRank();
    }

    @Override
    public Double component4() {
        return getStepSize();
    }

    @Override
    public Integer component5() {
        return getQuotePrecision();
    }

    @Override
    public Double component6() {
        return getPrice();
    }

    @Override
    public Long component7() {
        return getOrderId();
    }

    @Override
    public Boolean component8() {
        return getIsTrading();
    }

    @Override
    public String value1() {
        return getSymbol();
    }

    @Override
    public Integer value2() {
        return getGalaxyScore();
    }

    @Override
    public Integer value3() {
        return getAltRank();
    }

    @Override
    public Double value4() {
        return getStepSize();
    }

    @Override
    public Integer value5() {
        return getQuotePrecision();
    }

    @Override
    public Double value6() {
        return getPrice();
    }

    @Override
    public Long value7() {
        return getOrderId();
    }

    @Override
    public Boolean value8() {
        return getIsTrading();
    }

    @Override
    public SymbolRecord value1(String value) {
        setSymbol(value);
        return this;
    }

    @Override
    public SymbolRecord value2(Integer value) {
        setGalaxyScore(value);
        return this;
    }

    @Override
    public SymbolRecord value3(Integer value) {
        setAltRank(value);
        return this;
    }

    @Override
    public SymbolRecord value4(Double value) {
        setStepSize(value);
        return this;
    }

    @Override
    public SymbolRecord value5(Integer value) {
        setQuotePrecision(value);
        return this;
    }

    @Override
    public SymbolRecord value6(Double value) {
        setPrice(value);
        return this;
    }

    @Override
    public SymbolRecord value7(Long value) {
        setOrderId(value);
        return this;
    }

    @Override
    public SymbolRecord value8(Boolean value) {
        setIsTrading(value);
        return this;
    }

    @Override
    public SymbolRecord values(String value1, Integer value2, Integer value3, Double value4, Integer value5, Double value6, Long value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SymbolRecord
     */
    public SymbolRecord() {
        super(Symbol.SYMBOL);
    }

    /**
     * Create a detached, initialised SymbolRecord
     */
    public SymbolRecord(String symbol, Integer galaxyScore, Integer altRank, Double stepSize, Integer quotePrecision, Double price, Long orderId, Boolean isTrading) {
        super(Symbol.SYMBOL);

        setSymbol(symbol);
        setGalaxyScore(galaxyScore);
        setAltRank(altRank);
        setStepSize(stepSize);
        setQuotePrecision(quotePrecision);
        setPrice(price);
        setOrderId(orderId);
        setIsTrading(isTrading);
    }
}
