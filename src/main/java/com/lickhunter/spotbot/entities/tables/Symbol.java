/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.spotbot.entities.tables;


import com.lickhunter.spotbot.entities.DefaultSchema;
import com.lickhunter.spotbot.entities.Keys;
import com.lickhunter.spotbot.entities.tables.records.SymbolRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Symbol extends TableImpl<SymbolRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SYMBOL</code>
     */
    public static final Symbol SYMBOL = new Symbol();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SymbolRecord> getRecordType() {
        return SymbolRecord.class;
    }

    /**
     * The column <code>SYMBOL.SYMBOL</code>.
     */
    public final TableField<SymbolRecord, String> SYMBOL_ = createField(DSL.name("SYMBOL"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>SYMBOL.GALAXY_SCORE</code>.
     */
    public final TableField<SymbolRecord, Integer> GALAXY_SCORE = createField(DSL.name("GALAXY_SCORE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>SYMBOL.ALT_RANK</code>.
     */
    public final TableField<SymbolRecord, Integer> ALT_RANK = createField(DSL.name("ALT_RANK"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>SYMBOL.STEP_SIZE</code>.
     */
    public final TableField<SymbolRecord, Double> STEP_SIZE = createField(DSL.name("STEP_SIZE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>SYMBOL.QUOTE_PRECISION</code>.
     */
    public final TableField<SymbolRecord, Integer> QUOTE_PRECISION = createField(DSL.name("QUOTE_PRECISION"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>SYMBOL.PRICE</code>.
     */
    public final TableField<SymbolRecord, Double> PRICE = createField(DSL.name("PRICE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>SYMBOL.ORDER_ID</code>.
     */
    public final TableField<SymbolRecord, Long> ORDER_ID = createField(DSL.name("ORDER_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>SYMBOL.IS_TRADING</code>.
     */
    public final TableField<SymbolRecord, Boolean> IS_TRADING = createField(DSL.name("IS_TRADING"), SQLDataType.BOOLEAN, this, "");

    private Symbol(Name alias, Table<SymbolRecord> aliased) {
        this(alias, aliased, null);
    }

    private Symbol(Name alias, Table<SymbolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SYMBOL</code> table reference
     */
    public Symbol(String alias) {
        this(DSL.name(alias), SYMBOL);
    }

    /**
     * Create an aliased <code>SYMBOL</code> table reference
     */
    public Symbol(Name alias) {
        this(alias, SYMBOL);
    }

    /**
     * Create a <code>SYMBOL</code> table reference
     */
    public Symbol() {
        this(DSL.name("SYMBOL"), null);
    }

    public <O extends Record> Symbol(Table<O> child, ForeignKey<O, SymbolRecord> key) {
        super(child, key, SYMBOL);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SymbolRecord> getPrimaryKey() {
        return Keys.PK_SYMBOL;
    }

    @Override
    public List<UniqueKey<SymbolRecord>> getKeys() {
        return Arrays.<UniqueKey<SymbolRecord>>asList(Keys.PK_SYMBOL);
    }

    @Override
    public Symbol as(String alias) {
        return new Symbol(DSL.name(alias), this);
    }

    @Override
    public Symbol as(Name alias) {
        return new Symbol(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbol rename(String name) {
        return new Symbol(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbol rename(Name name) {
        return new Symbol(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, Integer, Double, Integer, Double, Long, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
